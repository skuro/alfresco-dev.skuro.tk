<?xml version='1.0' encoding='UTF-8'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
-->
<!DOCTYPE beans PUBLIC '-//SPRING//DTD BEAN//EN' 'http://www.springframework.org/dtd/spring-beans.dtd'>

<beans>
    
	<bean name="ldapAuthenticationPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="ignoreUnresolvablePlaceholders">
            <value>true</value>
        </property>  
        <property name="locations">
            <value>classpath:alfresco/extension/application.properties</value>
        </property>
    </bean>



    <!-- DAO that rejects changes - LDAP is read only at the moment. It does allow users to be deleted with out warnings from the UI. -->
    
    <bean name="authenticationDao" class="org.alfresco.repo.security.authentication.DefaultMutableAuthenticationDao" >
        <property name="allowDeleteUser">
            <value>${ldap.authentication.allowDeleteUser}</value>
        </property>
    </bean>    
   

    <bean id="ldapInitialDirContextFactory" class="org.alfresco.repo.security.authentication.ldap.LDAPInitialDirContextFactoryImpl">
        <property name="initialDirContextEnvironment">
            <map>
                <!-- The LDAP provider -->
                <entry key="java.naming.factory.initial">
                    <value>${ldap.authentication.provider}</value>
                </entry>
                
                <!-- The url to the LDAP server -->
                <!-- Note you can use space separated urls - they will be tried in turn until one works -->
                <!-- This could be used to authenticate against one or more ldap servers (you will not know which one ....) -->
                <entry key="java.naming.provider.url">
                   	<value>${ldap.authentication.url}</value>
                </entry>
		<entry key="java.naming.security.protocol">
			<value>${ldap.authentication.protocol}</value>
		</entry>                
                <!-- The authentication mechanism to use      -->
                <!-- Some sasl authentication mechanisms may require a realm to be set -->
                <!--                java.naming.security.sasl.realm -->
                <!-- The available options will depend on your LDAP provider -->
                
                <!-- The id of a user who can read group and user information -->
                <!-- This does not go through the pattern substitution defined above and is used "as is" -->
                <entry key="java.naming.security.principal">
                    <value>${ldap.authnetication.adminUser}</value>
                </entry>
                <!-- The password for the user defined above -->
                <entry key="java.naming.security.credentials">
                    <value>${ldap.authnetication.adminPassword}</value>
                </entry>
            </map>
        </property>
    </bean>
	
	<bean id="authenticationComponent" class="org.alfresco.repo.security.authentication.ldap.LDAPAuthenticationComponentImpl">
        <property name="LDAPInitialDirContextFactory">
            <ref bean="ldapInitialDirContextFactory"/>
        </property>
        <property name="userNameFormat">
            <value>cn=%s,ou=Identities,ou=Internal,o=NXP</value>
        </property>
         <property name="allowGuestLogin">
            <value>${ldap.authentication.guestLogin.allowed}</value>
        </property>
    </bean>
    
    
    <!-- The person service.                                                -->
    
    <bean id="personService" class="org.alfresco.repo.security.person.PersonServiceImpl" init-method="init">
        <property name="nodeService">
            <ref bean="nodeService" />
        </property>
        <property name="searchService">
            <ref bean="admSearchService" />
        </property>
        <property name="permissionServiceSPI">
            <ref bean="permissionServiceImpl" />
        </property>
        <property name="authorityService">
            <ref bean="authorityService" />
        </property>
        <property name="namespacePrefixResolver">
            <ref bean="namespaceService" />
        </property>
        <property name="policyComponent">
            <ref bean="policyComponent"/>
        </property>
        <property name="personCache">
            <ref bean="personCache" />
        </property>
        <!-- Configurable properties.                                 -->
        <!--                                                          -->
        <!-- TODO:                                                    -->
        <!-- Add support for creating real home spaces adn setting    -->
        <!-- permissions on the hame space and people created.        -->
        <!--                                                          -->
        <!-- The store in which people are persisted.                 -->
        <property name="storeUrl">
            <value>${spaces.store}</value>
        </property>
        <!-- Some authentication mechanisms may need to create people -->
        <!-- in the repository on demand. This enables that feature.  -->
        <!-- If dsiabled an error will be generated for missing       -->
        <!-- people. If enabled then a person will be created and     -->
        <!-- persisted.                                               -->
        <!-- Valid values are                                         -->
        <!--     ${server.transaction.allow-writes}                   -->
        <!--     false                                                -->
        <property name="createMissingPeople">
            <value>${server.transaction.allow-writes}</value>
        </property>
        <property name="userNamesAreCaseSensitive">
            <value>${user.name.caseSensitive}</value>
        </property>
        <!-- New properties after 1.4.0 to deal with duplicate user ids when found -->
        <property name="processDuplicates">
            <value>${personService.processDuplicates}</value>
        </property>
        <!-- one of:  LEAVE, SPLIT, DELETE -->
        <property name="duplicateMode">
            <value>${personService.duplicateMode}</value>
        </property>
        <property name="lastIsBest">
            <value>${personService.lastIsBest}</value>
        </property>
        <property name="includeAutoCreated">
            <value>${personService.includeAutoCreated}</value>
        </property>
    </bean>
    
    

</beans>
